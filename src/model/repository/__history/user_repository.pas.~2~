  unit user_repository;

interface
uses my_contracts, users_entity, FireDAC.Comp.Client, DMConnection;

type
TUserRepository = class(TInterfacedObject,IUserRepository)

  private

  FConnection : TFDConnection;
  function RowToUser(aQuery: TFDQuery): TUserModel;

  public
    function FindByID(aID: Integer) : TUserModel;
    function FindByIDEscola(aID: Integer) : TUserModel;
    function FindByNome(aNome: String) : TUserModel;
    procedure Save (aModel : TUserModel);
    constructor Create();
    procedure Update(aModel: TUserModel);
end;


implementation


constructor TUserRepository.Create();
begin
    FConnection := DataModule1.FDConnection1;
end;

function TUserRepository.RowToUser(aQuery: TFDQuery): TUserModel;
var FUserRepo : TUserModel;
begin
  FUserRepo := TUserModel.Create;
  FUserRepo.SetID(aQuery.FieldByName('id').AsInteger);
  FUserRepo.SetNome(aQuery.FieldByName('user_name').AsString);
  FUserRepo.SetPassword(aQuery.FieldByName('password').AsString);
  FUserRepo.SetEmail(aQuery.FieldByName('email').AsString);
  FUserRepo.SetRole(aQuery.FieldByName('user_role_id').AsInteger);
  Result := FUserRepo;


end;

procedure TUserRepository.Save(aModel: TUserModel);
var Qry : TFDQuery;
SchemaName : String;
SQL : String;
begin
  Qry:= TFDQuery.Create(nil);
 try
  Qry.Connection := FConnection;
  Qry.SQL.Text := 'insert into users (user_name,user_role_id, password, email, user_escola_id)' + 'values (:NAME ,:ROLE,:SENHA ,:EMAIL ,:ESCOLA )';
  Qry.ParamByName('NAME').AsString := aModel.GetNome;
  Qry.ParamByName('ROLE').AsInteger := aModel.GetRole;
  Qry.ParamByName('SENHA').AsString := aModel.GetPassword;
  Qry.ParamByName('EMAIL').AsString := aModel.GetEmail;
  Qry.ParamByName('ESCOLA').AsInteger := aModel.GetEscola;
  Qry.ExecSQL;

  Qry.SQL.Clear;

 finally
  Qry.Free;
 end;


end;

procedure TUserRepository.Update(aModel: TUserModel);
begin
  //aaaaa
end;

{ TLoginRepository }

function TUserRepository.FindByID(aID: Integer): TUserModel;
var Qry : TFDQuery;
begin
  Result := nil;
  Qry:= TFDQuery.Create(nil);
 try
  Qry.Connection := FConnection;
  Qry.SQL.Text := 'Select * From users WHERE id = :ID';
  Qry.ParamByName('ID').AsInteger := aID;
  Qry.Open();

  if not Qry.IsEmpty then begin
    Result := RowToUser(Qry);
  end;

 finally
  Qry.Free;
 end;

end;


function TUserRepository.FindByIDEscola(aID: Integer): TUserModel;
var Qry : TFDQuery;
begin
  Result := nil;
  Qry:= TFDQuery.Create(nil);
 try
  Qry.Connection := FConnection;
  Qry.SQL.Text := 'Select * From users WHERE user_escola_id = :ID';
  Qry.ParamByName('ID').AsInteger := aID;
  Qry.Open();

  if not Qry.IsEmpty then begin
    Result := RowToUser(Qry);
  end;

 finally
  Qry.Free;
 end;

end;

function TUserRepository.FindByNome(aNome: String): TUserModel;
var Qry : TFDQuery;
begin
  Result := nil;
  Qry:= TFDQuery.Create(nil);
 try
  Qry.Connection := FConnection;
  Qry.SQL.Text := 'Select * From users WHERE user_name = :NAME';
  Qry.ParamByName('NAME').AsString := aNome;
  Qry.Open();

  if not Qry.IsEmpty then begin
    Result := RowToUser(Qry);
  end;

 finally
  Qry.Free;
 end;

end;



end.
