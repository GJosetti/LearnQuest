unit user_service;

interface
uses my_contracts, Vcl.Dialogs,user_DTO, users_entity, SysUtils, user_repository;

type
TUserService = class(TInterfacedObject,IUserService)

private
  var FUserRepository : IUserRepository;

public
  function GetByID(aID: Integer): TUserDTO;
  function GetByEscolaID (aID: Integer): TuserDTO;
  function ValidarLogin(aDTO: TUserDTO):TUserDTO;
  procedure Salvar(aDTO: TUserDTO; aIDEscola : Integer);
  constructor Create();
  procedure Update(aDto : TUserDTO);
end;




implementation
uses DMConnection;


{ TUserService }



constructor TUserService.Create();
begin


  if not Assigned(FUserRepository) then begin
    FUserRepository := TUserRepository.Create();
  end;


end;

function TUserService.GetByEscolaID(aID: Integer): TuserDTO;
var FResultDTO : TUserDTO;
var FUserModel : TUserModel;
begin
  try
    FUserModel := FUserRepository.FindByIDEscola(aID);
    if FuserModel <> nil then begin
      FResultDTO := TUserDTO.Create;
      FResultDTO.ID := FUserModel.GetID;
      FResultDTO.Name := FUserModel.GetNome;
      FResultDTO.Role := FUserModel.GetRole;
      FResultDTO.Password := FUserModel.GetPassword;
      FResultDTO.Email := FUserModel.GetEmail;
    Result := FResultDTO;

    end else begin
      Result := nil;
    end;


  finally
    FUserModel.Free;
  end;
end;


function TUserService.GetByID (aID : Integer): TUserDTO;
var FResultDTO : TUserDTO;
var FUserModel : TUserModel;
begin
  try
    FUserModel := FUserRepository.FindByID(aID);
    FResultDTO := TUserDTO.Create;
    FResultDTO.Name := FUserModel.GetNome;
    FResultDTO.Role := FUserModel.GetRole;
    FResultDTO.Password := FUserModel.GetPassword;
    FResultDTO.Email := FUserModel.GetEmail;

    Result := FResultDTO;

  finally
    FUserModel.Free;
  end;
end;


procedure TUserService.Salvar(aDTO: TUserDTO; aIDEscola : Integer);

var FUsuario : TUserModel;
begin

  FUsuario := TUserModel.Create;
  FUsuario.SetNome(aDTO.Name);
  FUsuario.SetPassword(aDTO.Password);
  FUsuario.SetRole(aDTO.Role);
  FUsuario.SetEmail(aDTO.Email);
  FUsuario.SetEscola(aIDEscola);

  FUserRepository.Save(FUsuario);

end;

procedure TUserService.Update(aDto: TUserDTO);
var FUsuario : TUserModel;
begin
  FUsuario := TUserModel.Create;
  FUsuario.SetNome(aDTO.Name);
  FUsuario.SetPassword(aDTO.Password);
  FUsuario.SetRole(aDTO.Role);
  FUsuario.SetEmail(aDTO.Email);
  FUsuario.SetEscola(aIDEscola);

  //FUserRepository.Update();
end;

function TUserService.ValidarLogin(aDTO: TUserDTO): TUserDTO;

var hash: String;

var FUser: TUserModel;
var FUserDTO: TUserDTO;

begin

try
  //Verificações de preenchimento --------
  if Trim(aDto.Name) = '' then begin
    ShowMessage('O nome precisa ser preenchido!');
    //fazer de uma maneira mais visual
  end;
  if Trim(aDTO.Password) = '' then begin
    ShowMessage('A senha precisa ser preenchida!');
    //fazer de uma maneira mais visual
  end;
  //----------


  hash := aDto.Password.GetHashCode.ToString;

  FUser := FUserRepository.FindByNome(aDTO.Name);


  if (FUser = nil) or (FUser.GetPassword <> hash)  then begin
    Result := nil;
  end else begin
    FUserDTO := TUserDTO.Create;

    FuserDTO.Name := FUser.GetNome;
    FUserDTO.ID := FUser.GetID;
    FUserDTO.Role := Fuser.GetRole;

    Result := FUserDTO;
  end;
finally

end;






end;

end.
